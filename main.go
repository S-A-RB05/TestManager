package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"

	"example.com/m/v2/receive"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/client"
	"github.com/gorilla/mux"
)

type Article struct {
	Id      string `json:"Id"`
	Title   string `json:"Title"`
	Desc    string `json:"desc"`
	Content string `json:"content"`
}

// let's declare a global Articles array
// that we can then populate in our main function
// to simulate a databas
var Articles []Article

func homePage(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Welcome to the HomePage!")
	fmt.Println("Endpoint Hit: homePage")
}

func returnAllArticles(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint Hit: returnAllArticles")
	json.NewEncoder(w).Encode(Articles)
}

func returnSingleArticle(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	key := vars["id"]

	// Loop over all of our Articles
	// if the article.Id equals the key we pass in
	// return the article encoded as JSON
	for _, article := range Articles {
		if article.Id == key {
			json.NewEncoder(w).Encode(article)
		}
	}
}

func createNewArticle(w http.ResponseWriter, r *http.Request) {
	// get the body of our POST request
	// unmarshal this into a new Article struct
	// append this to our Articles array.
	reqBody, _ := ioutil.ReadAll(r.Body)
	var article Article
	json.Unmarshal(reqBody, &article)
	// update our global Articles array to include
	// our new Article
	Articles = append(Articles, article)

	json.NewEncoder(w).Encode(article)
}

func deleteArticle(w http.ResponseWriter, r *http.Request) {
	// once again, we will need to parse the path parameters
	vars := mux.Vars(r)
	// we will need to extract the `id` of the article we
	// wish to delete
	id := vars["id"]

	// we then need to loop through all our articles
	for index, article := range Articles {
		// if our id path parameter matches one of our
		// articles
		if article.Id == id {
			// updates our Articles array to remove the
			// article
			Articles = append(Articles[:index], Articles[index+1:]...)
		}
	}

}

func updateArticle(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	id := vars["id"]
	var updatedEvent Article
	reqBody, _ := ioutil.ReadAll(r.Body)
	json.Unmarshal(reqBody, &updatedEvent)
	for i, article := range Articles {
		if article.Id == id {

			article.Title = updatedEvent.Title
			article.Desc = updatedEvent.Desc
			article.Content = updatedEvent.Content
			Articles[i] = article
			json.NewEncoder(w).Encode(article)
		}
	}
}

func GetRunningContainers(w http.ResponseWriter, r *http.Request) {
	cli, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		panic(err)
	}

	containers, err := cli.ContainerList(context.Background(), types.ContainerListOptions{})
	if err != nil {
		panic(err)
	}

	for _, container := range containers {
		fmt.Printf("%s %s\n", container.ID[:10], container.Image)
	}
}

func CreateNewContainer(w http.ResponseWriter, r *http.Request) {
	ctx := context.Background()
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		panic(err)
	}
	defer cli.Close()

	reader, err := cli.ImagePull(ctx, "docker.io/library/alpine", types.ImagePullOptions{})
	if err != nil {
		panic(err)
	}
	io.Copy(os.Stdout, reader)

	resp, err := cli.ContainerCreate(ctx, &container.Config{
		Image: "alpine",
		Cmd:   []string{"echo", "hello world"},
	}, nil, nil, nil, "")
	if err != nil {
		panic(err)
	}

	if err := cli.ContainerStart(ctx, resp.ID, types.ContainerStartOptions{}); err != nil {
		panic(err)
	}
}

func StartContainer(w http.ResponseWriter, r *http.Request) {

	cli, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		panic(err)
	}

	ctx := context.Background()

	if err := cli.ContainerStart(ctx, "0be914e5052a28459884fc535507751c57337e7a09a413c08c32b578b984b000", types.ContainerStartOptions{}); err != nil {
		panic(err)
	}
}

type IDResponse struct {

	// The id of the newly created object.
	// Required: true
	ID string `json:"Id"`
}

func ExecuteCmd(w http.ResponseWriter, r *http.Request) {
	fmt.Println("Endpoint Hit: cmd")

	cli, err := client.NewClientWithOpts(client.FromEnv)
	if err != nil {
		panic(err)
	}

	respIdExecCreate, err := cli.ContainerExecCreate(context.Background(), "0be914e5052a28459884fc535507751c57337e7a09a413c08c32b578b984b000", types.ExecConfig{
		User:       "root",
		Privileged: true,
		Cmd: []string{
			"sh", "-c", "wine terminal.exe",
		},
	})
	if err != nil {
		fmt.Println(err)
	}

	response, err := cli.ContainerExecAttach(context.Background(), respIdExecCreate.ID, types.ExecStartCheck{})
	if err != nil {
		panic(err)
	}
	defer response.Close()

	data, _ := ioutil.ReadAll(response.Reader)
	fmt.Println(string(data))
}

var b64 = `Ly8rLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKwovL3wgICAgICAgICAgICAgICAgIEVBMzEzMzcgLSBtdWx0aS1zdHJhdGVneSBhZHZhbmNlZCB0cmF
kaW5nIHJvYm90LiB8Ci8vfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvcHlyaWdodCAyMDE2LTIwMjIsIEVBMzEzMzcgTHRkIHwKLy98ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHR0cHM6Ly9na
XRodWIuY29tL0VBMzEzMzcgfAovLystLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0rCgovKgogKiAgVGhpcyBmaWxlIGlzIGZyZWUgc29mdHdhcmU6IHlvdSBjYW4gcmV
kaXN0cmlidXRlIGl0IGFuZC9vciBtb2RpZnkKICogIGl0IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXMgcHVibGlzaGVkIGJ5CiAqICB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBla
XRoZXIgdmVyc2lvbiAzIG9mIHRoZSBMaWNlbnNlLCBvcgogKiAgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi4KCiAqICBUaGlzIHByb2dyYW0gaXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHV
zZWZ1bCwKICogIGJ1dCBXSVRIT1VUIEFOWSBXQVJSQU5UWTsgd2l0aG91dCBldmVuIHRoZSBpbXBsaWVkIHdhcnJhbnR5IG9mCiAqICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgd
GhlCiAqICBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSBmb3IgbW9yZSBkZXRhaWxzLgoKICogIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlCiAqICBhbG9uZyB3aXR
oIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwOi8vd3d3LmdudS5vcmcvbGljZW5zZXMvPi4KICovCgovLyBJbmNsdWRlcy4KI2luY2x1ZGUgImluY2x1ZGUvaW5jbHVkZXMuaCIKCi8vIEVBIHByb3BlcnRpZXMuCiNpZmRlZiBfX
3Byb3BlcnR5X18KI3Byb3BlcnR5IGNvcHlyaWdodCBlYV9jb3B5CiNwcm9wZXJ0eSBkZXNjcmlwdGlvbiBlYV9uYW1lCiNwcm9wZXJ0eSBkZXNjcmlwdGlvbiBlYV9kZXNjCiNwcm9wZXJ0eSBpY29uICJyZXNvdXJjZXMvZmF2aWNvbi5pY28
iCiNwcm9wZXJ0eSBsaW5rIGVhX2xpbmsKI3Byb3BlcnR5IHZlcnNpb24gZWFfdmVyc2lvbgojZW5kaWYKCi8vIEVBIGluZGljYXRvciByZXNvdXJjZXMuCiNpZmRlZiBfX3Jlc291cmNlX18KI2lmZGVmIF9fTVFMNV9fCi8vIFRlc3RlciBwc
m9wZXJ0aWVzLgojcHJvcGVydHkgdGVzdGVyX2luZGljYXRvciAiOjoiICsgSU5ESV9FV09fT1NDX1BBVEggKyAiXFxFbGxpb3R0X1dhdmVfT3NjaWxsYXRvcjIiICsgTVFMX0VYVAojcHJvcGVydHkgdGVzdGVyX2luZGljYXRvciAiOjoiICs
gSU5ESV9TVkVCQl9QQVRIICsgIlxcU1ZFX0JvbGxpbmdlcl9CYW5kcyIgKyBNUUxfRVhUCiNwcm9wZXJ0eSB0ZXN0ZXJfaW5kaWNhdG9yICI6OiIgKyBJTkRJX1RNQV9DR19QQVRIICsgIlxcVE1BK0NHX21sYWRlbl9OUlAiICsgTVFMX0VYV
AojcHJvcGVydHkgdGVzdGVyX2luZGljYXRvciAiOjoiICsgSU5ESV9BVFJfTUFfVFJFTkRfUEFUSCArICJcXEFUUl9NQV9UcmVuZCIgKyBNUUxfRVhUCiNwcm9wZXJ0eSB0ZXN0ZXJfaW5kaWNhdG9yICI6OiIgKyBJTkRJX1RNQV9UUlVFX1B
BVEggKyAiXFxUTUFfVHJ1ZSIgKyBNUUxfRVhUCiNwcm9wZXJ0eSB0ZXN0ZXJfaW5kaWNhdG9yICI6OiIgKyBJTkRJX1NBV0FfUEFUSCArICJcXFNBV0EiICsgTVFMX0VYVAojcHJvcGVydHkgdGVzdGVyX2luZGljYXRvciAiOjoiICsgSU5ES
V9TVVBFUlRSRU5EX1BBVEggKyAiXFxTdXBlclRyZW5kIiArIE1RTF9FWFQKLy8gSW5kaWNhdG9yIHJlc291cmNlcy4KI3Jlc291cmNlIElORElfRVdPX09TQ19QQVRIICsgIlxcRWxsaW90dF9XYXZlX09zY2lsbGF0b3IyIiArIE1RTF9FWFQ
KI3Jlc291cmNlIElORElfU1ZFQkJfUEFUSCArICJcXFNWRV9Cb2xsaW5nZXJfQmFuZHMiICsgTVFMX0VYVAojcmVzb3VyY2UgSU5ESV9UTUFfQ0dfUEFUSCArICJcXFRNQStDR19tbGFkZW5fTlJQIiArIE1RTF9FWFQKI3Jlc291cmNlIElOR
ElfQVRSX01BX1RSRU5EX1BBVEggKyAiXFxBVFJfTUFfVHJlbmQiICsgTVFMX0VYVAojcmVzb3VyY2UgSU5ESV9UTUFfVFJVRV9QQVRIICsgIlxcVE1BX1RydWUiICsgTVFMX0VYVAojcmVzb3VyY2UgSU5ESV9TQVdBX1BBVEggKyAiXFxTQVd
BIiArIE1RTF9FWFQKI3Jlc291cmNlIElORElfU1VQRVJUUkVORF9QQVRIICsgIlxcU3VwZXJUcmVuZCIgKyBNUUxfRVhUCiNlbmRpZgojZW5kaWYKCi8vIEdsb2JhbCB2YXJpYWJsZXMuCkVBICplYTsKCi8vIElucHV0IHZhcmlhYmxlcwoKa
W5wdXQgaW50IHRlc3R2YXIgPSAxOwppbnB1dCBib29sIHRlc3Rib29sID0gZmFsc2U7CmlucHV0IGRvdWJsZSB0ZXN0ZG91Yj0wLjE7CgovKiBFQSBldmVudCBoYW5kbGVyIGZ1bmN0aW9ucyAqLwoKLyoqCiAqIEluaXRpYWxpemF0aW9uIGZ
1bmN0aW9uIG9mIHRoZSBleHBlcnQuCiAqLwppbnQgT25Jbml0KCkKewogIGJvb2wgX2luaXRpYXRlZCA9IHRydWU7CiAgUHJpbnRGb3JtYXQoIiVzIHYlcyAoJXMpIGluaXRpYWxpemluZy4uLiIsIGVhX25hbWUsIGVhX3ZlcnNpb24sIGVhX
2xpbmspOwogIF9pbml0aWF0ZWQgJj0gSW5pdEVBKCk7CiAgX2luaXRpYXRlZCAmPSBJbml0U3RyYXRlZ2llcygpOwogIGlmIChHZXRMYXN0RXJyb3IoKSA+IDApCiAgewogICAgZWEuR2V0TG9nZ2VyKCkuRXJyb3IoIkVycm9yIGR1cmluZyB
pbml0aWFsaXppbmchIiwgX19GVU5DVElPTl9MSU5FX18sIFRlcm1pbmFsOjpHZXRMYXN0RXJyb3JUZXh0KCkpOwogIH0KICBpZiAoRUFfRGlzcGxheURldGFpbHNPbkNoYXJ0KQogIHsKICAgIERpc3BsYXlTdGFydHVwSW5mbyh0cnVlKTsKI
CB9CiAgZWEuR2V0TG9nZ2VyKCkuRmx1c2goKTsKICBDaGFydDo6V2luZG93UmVkcmF3KCk7CiAgaWYgKCFfaW5pdGlhdGVkKQogIHsKICAgIGVhLlNldChTVFJVQ1RfRU5VTShFQVN0YXRlLCBFQV9TVEFURV9GTEFHX0VOQUJMRUQpLCBmYWx
zZSk7CiAgfQogIHJldHVybiAoX2luaXRpYXRlZCA/IElOSVRfU1VDQ0VFREVEIDogSU5JVF9GQUlMRUQpOwp9CgovKioKICogRGVpbml0aWFsaXphdGlvbiBmdW5jdGlvbiBvZiB0aGUgZXhwZXJ0LgogKi8Kdm9pZCBPbkRlaW5pdChjb25zd
CBpbnQgcmVhc29uKSB7IERlaW5pdFZhcnMoKTsgfQoKLyoqCiAqICJUaWNrIiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIChFQSBvbmx5KS4KICoKICogSW52b2tlZCB3aGVuIGEgbmV3IHRpY2sgZm9yIGEgc3ltYm9sIGlzIHJlY2VpdmVkLCB
0byB0aGUgY2hhcnQgb2Ygd2hpY2ggdGhlIEV4cGVydCBBZHZpc29yIGlzIGF0dGFjaGVkLgogKi8Kdm9pZCBPblRpY2soKQp7CiAgRUFQcm9jZXNzUmVzdWx0IF9yZXN1bHQgPSBlYS5Qcm9jZXNzVGljaygpOwogIGlmIChfcmVzdWx0LnN0Z
19wcm9jZXNzZWRfcGVyaW9kcyA+IDApCiAgewogICAgaWYgKEVBX0Rpc3BsYXlEZXRhaWxzT25DaGFydCAmJiAoVGVybWluYWw6OklzVmlzdWFsTW9kZSgpIHx8IFRlcm1pbmFsOjpJc1JlYWx0aW1lKCkpKQogICAgewogICAgICBzdHJpbmc
gX3RleHQgPSBTdHJpbmdGb3JtYXQoIiVzIHYlcyBieSAlcyAoJXMpXG4iLCBlYV9uYW1lLCBlYV92ZXJzaW9uLCBlYV9hdXRob3IsIGVhX2xpbmspOwogICAgICBfdGV4dCArPQogICAgICAgICAgU2VyaWFsaXplckNvbnZlcnRlcjo6RnJvb
U9iamVjdChlYSwgU0VSSUFMSVpFUl9GTEFHX0lOQ0xVREVfRFlOQU1JQykuUHJlY2lzaW9uKDIpLlRvU3RyaW5nPFNlcmlhbGl6ZXJKc29uPigpOwogICAgICBfdGV4dCArPSBlYS5HZXRMb2dnZXIoKS5Ub1N0cmluZygpOwogICAgICBDb21t
ZW50KF90ZXh0KTsKICAgIH0KICB9Cn0KCiNpZmRlZiBfX01RTDVfXwovKioKICogIlRyYWRlIiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIChNUUw1IG9ubHkpLgogKgogKiBJbnZva2VkIHdoZW4gYSB0cmFkZSBvcGVyYXRpb24gaXMgY29tcGx
ldGVkIG9uIGEgdHJhZGUgc2VydmVyLgogKi8Kdm9pZCBPblRyYWRlKCkge30KCi8qKgogKiAiT25UcmFkZVRyYW5zYWN0aW9uIiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIChNUUw1IG9ubHkpLgogKgogKiBJbnZva2VkIHdoZW4gcGVyZm9ybW
luZyBzb21lIGRlZmluaXRlIGFjdGlvbnMgb24gYSB0cmFkZSBhY2NvdW50LCBpdHMgc3RhdGUgY2hhbmdlcy4KICovCnZvaWQgT25UcmFkZVRyYW5zYWN0aW9uKGNvbnN0IE1xbFRyYWRlVHJhbnNhY3Rpb24gJnRyYW5zLCAvLyBUcmFkZSB0c
mFuc2FjdGlvbiBzdHJ1Y3R1cmUuCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IE1xbFRyYWRlUmVxdWVzdCAmcmVxdWVzdCwgICAvLyBSZXF1ZXN0IHN0cnVjdHVyZS4KICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgTXFsVHJh
ZGVSZXN1bHQgJnJlc3VsdCAgICAgIC8vIFJlc3VsdCBzdHJ1Y3R1cmUuCikKewp9CgovKioKICogIlRpbWVyIiBldmVudCBoYW5kbGVyIGZ1bmN0aW9uIChNUUw1IG9ubHkpLgogKgogKiBJbnZva2VkIHBlcmlvZGljYWxseSBnZW5lcmF0ZWQ
gYnkgdGhlIEVBIHRoYXQgaGFzIGFjdGl2YXRlZCB0aGUgdGltZXIgYnkgdGhlIEV2ZW50U2V0VGltZXIgZnVuY3Rpb24uCiAqIFVzdWFsbHksIHRoaXMgZnVuY3Rpb24gaXMgY2FsbGVkIGJ5IE9uSW5pdC4KICovCnZvaWQgT25UaW1lcigpIH
t9CgovKioKICogIlRlc3RlckluaXQiIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24gKE1RTDUgb25seSkuCiAqCiAqIFRoZSBzdGFydCBvZiBvcHRpbWl6YXRpb24gaW4gdGhlIHN0cmF0ZWd5IHRlc3RlciBiZWZvcmUgdGhlIGZpcnN0IG9wdGlta
XphdGlvbiBwYXNzLgogKgogKiBJbnZva2VkIHdpdGggdGhlIHN0YXJ0IG9mIG9wdGltaXphdGlvbiBpbiB0aGUgc3RyYXRlZ3kgdGVzdGVyLgogKgogKiBAc2VlOiBodHRwczovL3d3dy5tcWw1LmNvbS9lbi9kb2NzL2Jhc2lzL2Z1bmN0aW9u
L2V2ZW50cwogKi8Kdm9pZCBUZXN0ZXJJbml0KCkge30KCi8qKgogKiAiT25UZXN0ZXIiIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24uCiAqCiAqIEludm9rZWQgYWZ0ZXIgYSBoaXN0b3J5IHRlc3Rpbmcgb2YgYW4gRXhwZXJ0IEFkdmlzb3Igb24
gdGhlIGNob3NlbiBpbnRlcnZhbCBpcyBvdmVyLgogKiBJdCBpcyBjYWxsZWQgcmlnaHQgYmVmb3JlIHRoZSBjYWxsIG9mIE9uRGVpbml0KCkuCiAqCiAqIFJldHVybnMgY2FsY3VsYXRlZCB2YWx1ZSB0aGF0IGlzIHVzZWQgYXMgdGhlIEN1c3
RvbSBtYXggY3JpdGVyaW9uCiAqIGluIHRoZSBnZW5ldGljIG9wdGltaXphdGlvbiBvZiBpbnB1dCBwYXJhbWV0ZXJzLgogKgogKiBAc2VlOiBodHRwczovL3d3dy5tcWw1LmNvbS9lbi9kb2NzL2Jhc2lzL2Z1bmN0aW9uL2V2ZW50cwogKi8KL
y8gZG91YmxlIE9uVGVzdGVyKCkgeyByZXR1cm4gMS4wOyB9CgovKioKICogIk9uVGVzdGVyUGFzcyIgZXZlbnQgaGFuZGxlciBmdW5jdGlvbiAoTVFMNSBvbmx5KS4KICoKICogSW52b2tlZCB3aGVuIGEgZnJhbWUgaXMgcmVjZWl2ZWQgZHVy
aW5nIEV4cGVydCBBZHZpc29yIG9wdGltaXphdGlvbiBpbiB0aGUgc3RyYXRlZ3kgdGVzdGVyLgogKgogKiBAc2VlOiBodHRwczovL3d3dy5tcWw1LmNvbS9lbi9kb2NzL2Jhc2lzL2Z1bmN0aW9uL2V2ZW50cwogKi8Kdm9pZCBPblRlc3RlclB
hc3MoKSB7fQoKLyoqCiAqICJPblRlc3RlckRlaW5pdCIgZXZlbnQgaGFuZGxlciBmdW5jdGlvbiAoTVFMNSBvbmx5KS4KICoKICogSW52b2tlZCBhZnRlciB0aGUgZW5kIG9mIEV4cGVydCBBZHZpc29yIG9wdGltaXphdGlvbiBpbiB0aGUgc3
RyYXRlZ3kgdGVzdGVyLgogKgogKiBAc2VlOiBodHRwczovL3d3dy5tcWw1LmNvbS9lbi9kb2NzL2Jhc2lzL2Z1bmN0aW9uL2V2ZW50cwogKi8Kdm9pZCBPblRlc3RlckRlaW5pdCgpIHt9CgovKioKICogIk9uQm9va0V2ZW50IiBldmVudCBoY
W5kbGVyIGZ1bmN0aW9uIChNUUw1IG9ubHkpLgogKgogKiBJbnZva2VkIG9uIERlcHRoIG9mIE1hcmtldCBjaGFuZ2VzLgogKiBUbyBwcmUtc3Vic2NyaWJlIHVzZSB0aGUgTWFya2V0Qm9va0FkZCgpIGZ1bmN0aW9uLgogKiBJbiBvcmRlciB0
byB1bnN1YnNjcmliZSBmb3IgYSBwYXJ0aWN1bGFyIHN5bWJvbCwgY2FsbCBNYXJrZXRCb29rUmVsZWFzZSgpLgogKi8Kdm9pZCBPbkJvb2tFdmVudChjb25zdCBzdHJpbmcgJnN5bWJvbCkge30KCi8qKgogKiAiT25Cb29rRXZlbnQiIGV2ZW5
0IGhhbmRsZXIgZnVuY3Rpb24gKE1RTDUgb25seSkuCiAqCiAqIEludm9rZWQgYnkgdGhlIGNsaWVudCB0ZXJtaW5hbCB3aGVuIGEgdXNlciBpcyB3b3JraW5nIHdpdGggYSBjaGFydC4KICovCnZvaWQgT25DaGFydEV2ZW50KGNvbnN0IGludC
BpZCwgICAgICAgICAvLyBFdmVudCBJRC4KICAgICAgICAgICAgICAgICAgY29uc3QgbG9uZyAmbHBhcmFtLCAgIC8vIFBhcmFtZXRlciBvZiB0eXBlIGxvbmcgZXZlbnQuCiAgICAgICAgICAgICAgICAgIGNvbnN0IGRvdWJsZSAmZHBhcmFtL
CAvLyBQYXJhbWV0ZXIgb2YgdHlwZSBkb3VibGUgZXZlbnQuCiAgICAgICAgICAgICAgICAgIGNvbnN0IHN0cmluZyAmc3BhcmFtICAvLyBQYXJhbWV0ZXIgb2YgdHlwZSBzdHJpbmcgZXZlbnRzLgopCnsKfQoKLy8gQHRvZG86IE9uVHJhZGVU
cmFuc2FjdGlvbiAoaHR0cHM6Ly93d3cubXFsNS5jb20vZW4vZG9jcy9iYXNpcy9mdW5jdGlvbi9ldmVudHMpLgojZW5kaWYgLy8gZW5kOiBfX01RTDVfXwoKLyogQ3VzdG9tIEVBIGZ1bmN0aW9ucyAqLwoKLyoqCiAqIERpc3BsYXkgaW5mbyB
vbiB0aGUgY2hhcnQuCiAqLwpib29sIERpc3BsYXlTdGFydHVwSW5mbyhib29sIF9zdGFydHVwID0gZmFsc2UsIHN0cmluZyBzZXAgPSAiXG4iKQp7CiAgc3RyaW5nIF9vdXRwdXQgPSAiIjsKICBSZXNldExhc3RFcnJvcigpOwogIGlmIChlYS
5HZXRTdGF0ZSgpLklzT3B0aW1pemF0aW9uTW9kZSgpIHx8IChlYS5HZXRTdGF0ZSgpLklzVGVzdGluZ01vZGUoKSAmJiAhZWEuR2V0U3RhdGUoKS5Jc1Zpc3VhbE1vZGUoKSkpCiAgewogICAgLy8gSWdub3JlIGNoYXJ0IHVwZGF0ZXMgd2hlb
iBvcHRpbWl6aW5nIG9yIHRlc3RpbmcgaW4gbm9uLXZpc3VhbCBtb2RlLgogICAgcmV0dXJuIGZhbHNlOwogIH0KICBfb3V0cHV0ICs9ICJBQ0NPVU5UOiAiICsgZWEuQWNjb3VudCgpLlRvU3RyaW5nKCkgKyBzZXA7CiAgX291dHB1dCArPSAi
RUE6ICIgKyBlYS5Ub1N0cmluZygpICsgc2VwOwogIF9vdXRwdXQgKz0gIlRFUk1JTkFMOiAiICsgZWEuR2V0VGVybWluYWwoKS5Ub1N0cmluZygpICsgc2VwOwojaWZkZWYgX19hZHZhbmNlZF9fCiAgLy8gUHJpbnQgZW5hYmxlZCBzdHJhdGV
naWVzIGluZm8uCiAgZm9yIChEaWN0U3RydWN0SXRlcmF0b3I8bG9uZywgUmVmPFN0cmF0ZWd5Pj4gX3NpdGVyID0gZWEuR2V0U3RyYXRlZ2llcygpLkJlZ2luKCk7IF9zaXRlci5Jc1ZhbGlkKCk7ICsrX3NpdGVyKQogIHsKICAgIFN0cmF0ZW
d5ICpfc3RyYXQgPSBfc2l0ZXIuVmFsdWUoKS5QdHIoKTsKICAgIHN0cmluZyBfc25hbWUgPQogICAgICAgIF9zdHJhdC5HZXROYW1lKCk7IC8vICsgIkAiICsgQ2hhcnRUZjo6VGZUb1N0cmluZyhfc3RyYXQuR2V0VGYoKS5HZXQ8RU5VTV9US
U1FRlJBTUVTPihDSEFSVF9QQVJBTV9URikpOwogICAgX291dHB1dCArPSBTdHJpbmdGb3JtYXQoIlN0cmF0ZWd5OiAlczogJXNcbiIsIF9zbmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlcmlhbGl6ZXJDb252ZXJ0ZXI6OkZy
b21PYmplY3QoX3N0cmF0LCBTRVJJQUxJWkVSX0ZMQUdfSU5DTFVERV9EWU5BTUlDKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5Ub1N0cmluZzxTZXJpYWxpemVySnNvbj4oU0VSSUFMSVpFUl9KU09OX05PX1dISVRFU1BBQ0V
TKSk7CiAgfQojZW5kaWYKICBpZiAoX3N0YXJ0dXApCiAgewogICAgaWYgKGVhLkdldChTVFJVQ1RfRU5VTShFQVN0YXRlLCBFQV9TVEFURV9GTEFHX1RSQURFX0FMTE9XRUQpKSkKICAgIHsKICAgICAgaWYgKCFUZXJtaW5hbDo6SGFzRXJyb3
IoKSkKICAgICAgewogICAgICAgIF9vdXRwdXQgKz0gc2VwICsgIlRyYWRpbmcgaXMgYWxsb3dlZCwgd2FpdGluZyBmb3IgbmV3IGJhcnMuLi4iOwogICAgICB9CiAgICAgIGVsc2UKICAgICAgewogICAgICAgIF9vdXRwdXQgKz0gc2VwICsgI
lRyYWRpbmcgaXMgYWxsb3dlZCwgYnV0IHRoZXJlIGlzIHNvbWUgaXNzdWUuLi4iOwogICAgICAgIF9vdXRwdXQgKz0gc2VwICsgVGVybWluYWw6OkdldExhc3RFcnJvclRleHQoKTsKICAgICAgICBlYS5HZXRMb2dnZXIoKS5BZGRMYXN0RXJy
b3IoX19GVU5DVElPTl9MSU5FX18pOwogICAgICB9CiAgICB9CiAgICBlbHNlIGlmIChUZXJtaW5hbDo6SXNSZWFsdGltZSgpKQogICAgewogICAgICBfb3V0cHV0ICs9IHNlcCArIFN0cmluZ0Zvcm1hdCgKICAgICAgICAgICAgICAgICAgICA
gICAgICAgIkVycm9yICVkOiBUcmFkaW5nIGlzIG5vdCBhbGxvd2VkIGZvciB0aGlzIHN5bWJvbCwgcGxlYXNlIGVuYWJsZSBhdXRvbWF0ZWQgdHJhZGluZyBvciBjaGVjayAiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICJ0aGUgc2V0dG
luZ3MhIiwKICAgICAgICAgICAgICAgICAgICAgICAgICAgX19MSU5FX18pOwogICAgfQogICAgZWxzZQogICAgewogICAgICBfb3V0cHV0ICs9IHNlcCArICJXYWl0aW5nIGZvciBuZXcgYmFycy4uLiI7CiAgICB9CiAgfQogIENvbW1lbnQoX
291dHB1dCk7CiAgcmV0dXJuICFUZXJtaW5hbDo6SGFzRXJyb3IoKTsKfQoKLyoqCiAqIEluaXQgRUEuCiAqLwpib29sIEluaXRFQSgpCnsKICBib29sIF9pbml0aWF0ZWQgPSBlYV9hdXRoOwogIEVBUGFyYW1zIGVhX3BhcmFtcyhfX0ZJTEVf
XywgVmVyYm9zZUxldmVsKTsKICAvLyBlYV9wYXJhbXMuU2V0Q2hhcnRJbmZvRnJlcShFQV9EaXNwbGF5RGV0YWlsc09uQ2hhcnQgPyAyIDogMCk7CiAgLy8gRUEgcGFyYW1zLgogIGVhX3BhcmFtcy5TZXREZXRhaWxzKGVhX25hbWUsIGVhX2R
lc2MsIGVhX3ZlcnNpb24sIFN0cmluZ0Zvcm1hdCgiJXMgKCVzKSIsIGVhX2F1dGhvciwgZWFfbGluaykpOwogIC8vIFJpc2sgcGFyYW1zLgogIGVhX3BhcmFtcy5TZXQoU1RSVUNUX0VOVU0oRUFQYXJhbXMsIEVBX1BBUkFNX1BST1BfUklTS1
9NQVJHSU5fTUFYKSwgRUFfUmlza19NYXJnaW5NYXgpOwogIGVhX3BhcmFtcy5TZXRGbGFnKEVBX1BBUkFNX0ZMQUdfTE9UU0laRV9BVVRPLCBFQV9Mb3RTaXplIDw9IDApOwogIC8vIEluaXQgaW5zdGFuY2UuCiAgZWEgPSBuZXcgRUEoZWFfc
GFyYW1zKTsKICBlYS5TZXQoVFJBREVfUEFSQU1fUklTS19NQVJHSU4sIEVBX1Jpc2tfTWFyZ2luTWF4KTsKICBpZiAoIWVhLkdldChTVFJVQ1RfRU5VTShFQVN0YXRlLCBFQV9TVEFURV9GTEFHX1RSQURFX0FMTE9XRUQpKSkKICB7CiAgICBl
YS5HZXRMb2dnZXIoKS5FcnJvcigKICAgICAgICAiVHJhZGluZyBpcyBub3QgYWxsb3dlZCBmb3IgdGhpcyBzeW1ib2wsIHBsZWFzZSBlbmFibGUgYXV0b21hdGVkIHRyYWRpbmcgb3IgY2hlY2sgdGhlIHNldHRpbmdzISIsCiAgICAgICAgX19
GVU5DVElPTl9MSU5FX18pOwogICAgX2luaXRpYXRlZCAmPSBmYWxzZTsKICB9CiNpZmRlZiBfX2FkdmFuY2VkX18KICBpZiAoX2luaXRpYXRlZCkKICB7CiAgICBFQVRhc2tzIF9lYV90YXNrcyhlYSk7CiAgICBfaW5pdGlhdGVkICY9IF9lYV90YXNrcy5BZGRUYXNrKEVBX1Rhc2sxX0lmLCBFQV9UYXNrMV9UaGVuKTsKICAgIF9pbml0aWF0ZWQgJj0gX2VhX3Rhc2tzLkFk
`

func DecodeBase64(w http.ResponseWriter, r *http.Request) {
	dec, err := base64.StdEncoding.DecodeString(b64)
	if err != nil {
		panic(err)
	}

	f, err := os.Create("myfilename.ex5")
	if err != nil {
		panic(err)
	}
	defer f.Close()

	if _, err := f.Write(dec); err != nil {
		panic(err)
	}
	if err := f.Sync(); err != nil {
		panic(err)
	}

	// go to begginng of file
	f.Seek(0, 0)

	// output file contents
	io.Copy(os.Stdout, f)
}

func handleRequests() {
	// creates a new instance of a mux router
	myRouter := mux.NewRouter().StrictSlash(true)
	// replace http.HandleFunc with myRouter.HandleFunc
	myRouter.HandleFunc("/", homePage)
	myRouter.HandleFunc("/all", returnAllArticles)
	myRouter.HandleFunc("/article/{id}", returnSingleArticle)
	myRouter.HandleFunc("/article", createNewArticle).Methods("POST")
	myRouter.HandleFunc("/article/{id}", deleteArticle).Methods("DELETE")
	myRouter.HandleFunc("/article/{id}", updateArticle).Methods("PUT")
	myRouter.HandleFunc("/running", GetRunningContainers)
	myRouter.HandleFunc("/create", CreateNewContainer)
	myRouter.HandleFunc("/start", StartContainer)
	myRouter.HandleFunc("/cmd", ExecuteCmd)
	myRouter.HandleFunc("/decode", DecodeBase64)

	// finally, instead of passing in nil, we want
	// to pass in our newly created router as the second
	// argument
	log.Fatal(http.ListenAndServe(":8081", myRouter))
}

func main() {
	Articles = []Article{
		{Id: "1", Title: "Hello", Desc: "Article Description", Content: "Article Content"},
		{Id: "2", Title: "Hello 2", Desc: "Article Description", Content: "Article Content"},
	}
	handleRequests()
	receive.Strat()
}